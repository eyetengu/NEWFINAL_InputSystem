//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_EYEAssets/_Input/FrameworkInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FrameworkInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FrameworkInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FrameworkInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""1992fcd3-e1ff-4f39-b811-a657c63bbf58"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""dd07e4e5-3437-46a4-9c6b-2766df965b45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""ae3dad20-4fc5-4af5-b4c3-3de4cefe6776"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Elevation"",
                    ""type"": ""Button"",
                    ""id"": ""c0c906b6-5b48-410e-99bd-8d68a2160cf4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Collect"",
                    ""type"": ""Button"",
                    ""id"": ""c924f8f7-3493-40c8-974c-ea985009d37e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""230d6231-89ef-4e94-9a7a-69ae3d093a90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PressAndHold"",
                    ""type"": ""Button"",
                    ""id"": ""c6ac3e82-28e7-45d9-a6ee-d2786a318168"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c532b3db-0558-4476-8d3c-0e20d531fc68"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8db6f50b-3063-4760-a93a-1d788575ccba"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8141b8e7-070e-4f60-995c-f745a57b1806"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""7ec392ac-4088-468f-9292-3142b4b0e876"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ea4257c0-aa4c-4096-ba24-ad273b51aefa"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""83bb1f93-49ea-4233-a22a-f8a3f85e697a"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""cbdb9f6b-84fc-4597-9490-b8f8c8dce514"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ae2002cc-ef60-444c-93fb-4b557c925528"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f9fe3438-d451-471d-8161-ef6b28da2d8e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""8567268b-0002-41c2-8056-56ebcce1e68e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9b7a1306-236d-4274-937f-5fbdf9bf3634"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""df18a214-171f-4443-ae02-bb52e0c352c3"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""48037ee8-d1bf-46b3-a948-c9c66b6d530e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""09a064ea-c823-40ae-807c-72be478a255f"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""75706b79-1cef-4e14-9eeb-184e1b2b2bf2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""58bc11bd-0fbb-4b4a-8aab-fca52aa14bbd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Collect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9c1ede8-ca39-4a87-b754-133fbe93da6b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""682000ec-2cc6-4cf4-8dbe-12b2ae6a2d7f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressAndHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Drone"",
            ""id"": ""7c1a34c7-23a7-42e9-8d29-434e91beea59"",
            ""actions"": [
                {
                    ""name"": ""MoveForwardBack"",
                    ""type"": ""Button"",
                    ""id"": ""339c84c2-5350-446d-9829-00b2e4d41cd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""7a53cab5-ddac-4bf6-85f4-429177eca8a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Elevation"",
                    ""type"": ""Button"",
                    ""id"": ""96a93f56-8695-4095-af19-b0fd10f17628"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4b50999d-ce3e-4ded-970b-d14381fe1c93"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardBack"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4ac482f0-fca9-4070-aefe-cc90d477eba4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e41913e3-f669-44b9-baa4-1bc8a47f9672"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a3c1b991-2ce1-4f29-859b-1c9d1e7bf19c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e9161034-1c9a-4c8d-975e-7dbfdd56ee5f"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5b6b265b-1481-45cb-881e-03e34886511a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""81e02779-3020-4072-af2a-d514e3a88512"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b10cd24a-964e-4774-abdc-27120ee848df"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6e768531-726b-4dc2-9bd9-d8ae39d9dddf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Forklift"",
            ""id"": ""14238e2e-3de1-439e-82e4-9e87b896691e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""2663b95a-dc70-45c5-b09f-1bfdd77051b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ForksRaiseLower"",
                    ""type"": ""Button"",
                    ""id"": ""60be4ef6-f825-4d5d-b9b6-acf31831cf81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""c11ebd1e-612b-4e10-8395-adffee6f7994"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e7dd393a-663c-4847-8319-6a8279c9abcf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForksRaiseLower"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c46b7f70-ddd3-47f6-b8df-1af0453e9b11"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForksRaiseLower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3ef3e60f-2ab3-48de-8619-68528d2fa3e3"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForksRaiseLower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c046667e-c60d-4520-bac9-be3de3917faf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b7f8832f-22e7-4531-8827-d62b3b559b93"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""54f9ade7-df5f-47ef-a21e-fbbf26afa04d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""dbe79689-2d94-4523-afec-9b9c6b99a69f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b726d33b-c134-4136-8279-5a0c6bd0db70"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c532fb44-3bce-4d16-bd1c-e33fb8cb8f49"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Melee"",
            ""id"": ""c0a635d2-75d3-40b7-98d4-579b7ed5ae6f"",
            ""actions"": [
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""ac77483f-838f-4a48-8dd1-287b790c546e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1fe56727-9f30-4fb7-95d0-1ce1ab7d4276"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hacking"",
            ""id"": ""6585cf1e-04f4-463d-a519-6b97307b1372"",
            ""actions"": [
                {
                    ""name"": ""AccessFramework"",
                    ""type"": ""Button"",
                    ""id"": ""d9546867-2948-43e4-9b0d-9bfaea553267"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14acf7e8-0b63-43f8-ae3c-77ffee13ecf1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold(duration=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AccessFramework"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Rotation = m_Player.FindAction("Rotation", throwIfNotFound: true);
        m_Player_Elevation = m_Player.FindAction("Elevation", throwIfNotFound: true);
        m_Player_Collect = m_Player.FindAction("Collect", throwIfNotFound: true);
        m_Player_Action = m_Player.FindAction("Action", throwIfNotFound: true);
        m_Player_PressAndHold = m_Player.FindAction("PressAndHold", throwIfNotFound: true);
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_MoveForwardBack = m_Drone.FindAction("MoveForwardBack", throwIfNotFound: true);
        m_Drone_Rotate = m_Drone.FindAction("Rotate", throwIfNotFound: true);
        m_Drone_Elevation = m_Drone.FindAction("Elevation", throwIfNotFound: true);
        // Forklift
        m_Forklift = asset.FindActionMap("Forklift", throwIfNotFound: true);
        m_Forklift_Movement = m_Forklift.FindAction("Movement", throwIfNotFound: true);
        m_Forklift_ForksRaiseLower = m_Forklift.FindAction("ForksRaiseLower", throwIfNotFound: true);
        m_Forklift_Rotation = m_Forklift.FindAction("Rotation", throwIfNotFound: true);
        // Melee
        m_Melee = asset.FindActionMap("Melee", throwIfNotFound: true);
        m_Melee_Punch = m_Melee.FindAction("Punch", throwIfNotFound: true);
        // Hacking
        m_Hacking = asset.FindActionMap("Hacking", throwIfNotFound: true);
        m_Hacking_AccessFramework = m_Hacking.FindAction("AccessFramework", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Rotation;
    private readonly InputAction m_Player_Elevation;
    private readonly InputAction m_Player_Collect;
    private readonly InputAction m_Player_Action;
    private readonly InputAction m_Player_PressAndHold;
    public struct PlayerActions
    {
        private @FrameworkInputs m_Wrapper;
        public PlayerActions(@FrameworkInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Rotation => m_Wrapper.m_Player_Rotation;
        public InputAction @Elevation => m_Wrapper.m_Player_Elevation;
        public InputAction @Collect => m_Wrapper.m_Player_Collect;
        public InputAction @Action => m_Wrapper.m_Player_Action;
        public InputAction @PressAndHold => m_Wrapper.m_Player_PressAndHold;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Rotation.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @Elevation.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnElevation;
                @Elevation.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnElevation;
                @Elevation.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnElevation;
                @Collect.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCollect;
                @Collect.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCollect;
                @Collect.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCollect;
                @Action.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                @PressAndHold.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPressAndHold;
                @PressAndHold.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPressAndHold;
                @PressAndHold.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPressAndHold;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Elevation.started += instance.OnElevation;
                @Elevation.performed += instance.OnElevation;
                @Elevation.canceled += instance.OnElevation;
                @Collect.started += instance.OnCollect;
                @Collect.performed += instance.OnCollect;
                @Collect.canceled += instance.OnCollect;
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @PressAndHold.started += instance.OnPressAndHold;
                @PressAndHold.performed += instance.OnPressAndHold;
                @PressAndHold.canceled += instance.OnPressAndHold;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Drone
    private readonly InputActionMap m_Drone;
    private IDroneActions m_DroneActionsCallbackInterface;
    private readonly InputAction m_Drone_MoveForwardBack;
    private readonly InputAction m_Drone_Rotate;
    private readonly InputAction m_Drone_Elevation;
    public struct DroneActions
    {
        private @FrameworkInputs m_Wrapper;
        public DroneActions(@FrameworkInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForwardBack => m_Wrapper.m_Drone_MoveForwardBack;
        public InputAction @Rotate => m_Wrapper.m_Drone_Rotate;
        public InputAction @Elevation => m_Wrapper.m_Drone_Elevation;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterface != null)
            {
                @MoveForwardBack.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnMoveForwardBack;
                @MoveForwardBack.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnMoveForwardBack;
                @MoveForwardBack.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnMoveForwardBack;
                @Rotate.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Elevation.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnElevation;
                @Elevation.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnElevation;
                @Elevation.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnElevation;
            }
            m_Wrapper.m_DroneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveForwardBack.started += instance.OnMoveForwardBack;
                @MoveForwardBack.performed += instance.OnMoveForwardBack;
                @MoveForwardBack.canceled += instance.OnMoveForwardBack;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Elevation.started += instance.OnElevation;
                @Elevation.performed += instance.OnElevation;
                @Elevation.canceled += instance.OnElevation;
            }
        }
    }
    public DroneActions @Drone => new DroneActions(this);

    // Forklift
    private readonly InputActionMap m_Forklift;
    private IForkliftActions m_ForkliftActionsCallbackInterface;
    private readonly InputAction m_Forklift_Movement;
    private readonly InputAction m_Forklift_ForksRaiseLower;
    private readonly InputAction m_Forklift_Rotation;
    public struct ForkliftActions
    {
        private @FrameworkInputs m_Wrapper;
        public ForkliftActions(@FrameworkInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Forklift_Movement;
        public InputAction @ForksRaiseLower => m_Wrapper.m_Forklift_ForksRaiseLower;
        public InputAction @Rotation => m_Wrapper.m_Forklift_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Forklift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkliftActions set) { return set.Get(); }
        public void SetCallbacks(IForkliftActions instance)
        {
            if (m_Wrapper.m_ForkliftActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMovement;
                @ForksRaiseLower.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnForksRaiseLower;
                @ForksRaiseLower.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnForksRaiseLower;
                @ForksRaiseLower.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnForksRaiseLower;
                @Rotation.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_ForkliftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @ForksRaiseLower.started += instance.OnForksRaiseLower;
                @ForksRaiseLower.performed += instance.OnForksRaiseLower;
                @ForksRaiseLower.canceled += instance.OnForksRaiseLower;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public ForkliftActions @Forklift => new ForkliftActions(this);

    // Melee
    private readonly InputActionMap m_Melee;
    private IMeleeActions m_MeleeActionsCallbackInterface;
    private readonly InputAction m_Melee_Punch;
    public struct MeleeActions
    {
        private @FrameworkInputs m_Wrapper;
        public MeleeActions(@FrameworkInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Punch => m_Wrapper.m_Melee_Punch;
        public InputActionMap Get() { return m_Wrapper.m_Melee; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MeleeActions set) { return set.Get(); }
        public void SetCallbacks(IMeleeActions instance)
        {
            if (m_Wrapper.m_MeleeActionsCallbackInterface != null)
            {
                @Punch.started -= m_Wrapper.m_MeleeActionsCallbackInterface.OnPunch;
                @Punch.performed -= m_Wrapper.m_MeleeActionsCallbackInterface.OnPunch;
                @Punch.canceled -= m_Wrapper.m_MeleeActionsCallbackInterface.OnPunch;
            }
            m_Wrapper.m_MeleeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Punch.started += instance.OnPunch;
                @Punch.performed += instance.OnPunch;
                @Punch.canceled += instance.OnPunch;
            }
        }
    }
    public MeleeActions @Melee => new MeleeActions(this);

    // Hacking
    private readonly InputActionMap m_Hacking;
    private IHackingActions m_HackingActionsCallbackInterface;
    private readonly InputAction m_Hacking_AccessFramework;
    public struct HackingActions
    {
        private @FrameworkInputs m_Wrapper;
        public HackingActions(@FrameworkInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @AccessFramework => m_Wrapper.m_Hacking_AccessFramework;
        public InputActionMap Get() { return m_Wrapper.m_Hacking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HackingActions set) { return set.Get(); }
        public void SetCallbacks(IHackingActions instance)
        {
            if (m_Wrapper.m_HackingActionsCallbackInterface != null)
            {
                @AccessFramework.started -= m_Wrapper.m_HackingActionsCallbackInterface.OnAccessFramework;
                @AccessFramework.performed -= m_Wrapper.m_HackingActionsCallbackInterface.OnAccessFramework;
                @AccessFramework.canceled -= m_Wrapper.m_HackingActionsCallbackInterface.OnAccessFramework;
            }
            m_Wrapper.m_HackingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AccessFramework.started += instance.OnAccessFramework;
                @AccessFramework.performed += instance.OnAccessFramework;
                @AccessFramework.canceled += instance.OnAccessFramework;
            }
        }
    }
    public HackingActions @Hacking => new HackingActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnElevation(InputAction.CallbackContext context);
        void OnCollect(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnPressAndHold(InputAction.CallbackContext context);
    }
    public interface IDroneActions
    {
        void OnMoveForwardBack(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnElevation(InputAction.CallbackContext context);
    }
    public interface IForkliftActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnForksRaiseLower(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IMeleeActions
    {
        void OnPunch(InputAction.CallbackContext context);
    }
    public interface IHackingActions
    {
        void OnAccessFramework(InputAction.CallbackContext context);
    }
}
