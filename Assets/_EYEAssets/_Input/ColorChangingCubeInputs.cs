//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/ColorChangingCubeInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ColorChangingCubeInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ColorChangingCubeInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ColorChangingCubeInputs"",
    ""maps"": [
        {
            ""name"": ""Cube"",
            ""id"": ""8f0a93bc-72ef-43b8-9ab5-a3dde2c2c1eb"",
            ""actions"": [
                {
                    ""name"": ""ChangeColor"",
                    ""type"": ""Button"",
                    ""id"": ""408bc3a1-73a5-43db-b642-3b02ac57dc09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCube"",
                    ""type"": ""Button"",
                    ""id"": ""6a38b328-63fd-423b-bf44-cb2168d4ed52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""021b7c49-4658-4e90-860c-f39a5ad3f3e2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5952c93f-d6c5-4d2a-bd88-8e25733f33d2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCube"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""078f0bf7-d459-41b2-a260-b81424a2ec08"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""641033d9-8c24-4bb4-b64c-3b3ffbe1ae66"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""DrivableCube"",
            ""id"": ""a896b397-6cd4-486a-84a9-5a14c4732565"",
            ""actions"": [
                {
                    ""name"": ""Driving"",
                    ""type"": ""Value"",
                    ""id"": ""7bd1bd30-4518-46a8-a394-72dbf94483e8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6f03d78f-4dff-479d-b64a-2467ed6cc760"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Driving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""107b824b-403d-478b-9620-404ee2a2cd91"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Driving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0a067d09-272b-47ee-861e-19af882b8d9d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Driving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""307ea989-04b5-46a3-bee4-03824bbf79b3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Driving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0053d162-e1a7-424c-b1af-25a1c188a31a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Driving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cube
        m_Cube = asset.FindActionMap("Cube", throwIfNotFound: true);
        m_Cube_ChangeColor = m_Cube.FindAction("ChangeColor", throwIfNotFound: true);
        m_Cube_RotateCube = m_Cube.FindAction("RotateCube", throwIfNotFound: true);
        // DrivableCube
        m_DrivableCube = asset.FindActionMap("DrivableCube", throwIfNotFound: true);
        m_DrivableCube_Driving = m_DrivableCube.FindAction("Driving", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cube
    private readonly InputActionMap m_Cube;
    private ICubeActions m_CubeActionsCallbackInterface;
    private readonly InputAction m_Cube_ChangeColor;
    private readonly InputAction m_Cube_RotateCube;
    public struct CubeActions
    {
        private @ColorChangingCubeInputs m_Wrapper;
        public CubeActions(@ColorChangingCubeInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeColor => m_Wrapper.m_Cube_ChangeColor;
        public InputAction @RotateCube => m_Wrapper.m_Cube_RotateCube;
        public InputActionMap Get() { return m_Wrapper.m_Cube; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CubeActions set) { return set.Get(); }
        public void SetCallbacks(ICubeActions instance)
        {
            if (m_Wrapper.m_CubeActionsCallbackInterface != null)
            {
                @ChangeColor.started -= m_Wrapper.m_CubeActionsCallbackInterface.OnChangeColor;
                @ChangeColor.performed -= m_Wrapper.m_CubeActionsCallbackInterface.OnChangeColor;
                @ChangeColor.canceled -= m_Wrapper.m_CubeActionsCallbackInterface.OnChangeColor;
                @RotateCube.started -= m_Wrapper.m_CubeActionsCallbackInterface.OnRotateCube;
                @RotateCube.performed -= m_Wrapper.m_CubeActionsCallbackInterface.OnRotateCube;
                @RotateCube.canceled -= m_Wrapper.m_CubeActionsCallbackInterface.OnRotateCube;
            }
            m_Wrapper.m_CubeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeColor.started += instance.OnChangeColor;
                @ChangeColor.performed += instance.OnChangeColor;
                @ChangeColor.canceled += instance.OnChangeColor;
                @RotateCube.started += instance.OnRotateCube;
                @RotateCube.performed += instance.OnRotateCube;
                @RotateCube.canceled += instance.OnRotateCube;
            }
        }
    }
    public CubeActions @Cube => new CubeActions(this);

    // DrivableCube
    private readonly InputActionMap m_DrivableCube;
    private IDrivableCubeActions m_DrivableCubeActionsCallbackInterface;
    private readonly InputAction m_DrivableCube_Driving;
    public struct DrivableCubeActions
    {
        private @ColorChangingCubeInputs m_Wrapper;
        public DrivableCubeActions(@ColorChangingCubeInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Driving => m_Wrapper.m_DrivableCube_Driving;
        public InputActionMap Get() { return m_Wrapper.m_DrivableCube; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrivableCubeActions set) { return set.Get(); }
        public void SetCallbacks(IDrivableCubeActions instance)
        {
            if (m_Wrapper.m_DrivableCubeActionsCallbackInterface != null)
            {
                @Driving.started -= m_Wrapper.m_DrivableCubeActionsCallbackInterface.OnDriving;
                @Driving.performed -= m_Wrapper.m_DrivableCubeActionsCallbackInterface.OnDriving;
                @Driving.canceled -= m_Wrapper.m_DrivableCubeActionsCallbackInterface.OnDriving;
            }
            m_Wrapper.m_DrivableCubeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Driving.started += instance.OnDriving;
                @Driving.performed += instance.OnDriving;
                @Driving.canceled += instance.OnDriving;
            }
        }
    }
    public DrivableCubeActions @DrivableCube => new DrivableCubeActions(this);
    public interface ICubeActions
    {
        void OnChangeColor(InputAction.CallbackContext context);
        void OnRotateCube(InputAction.CallbackContext context);
    }
    public interface IDrivableCubeActions
    {
        void OnDriving(InputAction.CallbackContext context);
    }
}
